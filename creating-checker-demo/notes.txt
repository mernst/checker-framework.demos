The presentation shows how to create a checker.
It creates a simple variant of the Optional Checker.

===========================================================================

Google Docs Slides are in this folder:
https://drive.google.com/drive/u/1/folders/0B-veGEefpdeYcFdSSWJ6emxpMUE

===========================================================================

PRESENTATION:

----------------

Preparation:

This section tells how to create a version of the Optional Checker with
some changes undone.  The API documentation is generated from Javadoc
before undoing the changes, so it includes the Optional Checker.

(Do not run "manual" in parallel with any other gradle tasks.)

## Create the new version; make Javadoc that includes the new version.
# Optionally, first blow away the old version:
# \rm -rf $t/checker-framework-optional-demo && \
cd $t && \
cp -R checker-framework-branch-master checker-framework-optional-demo && \
rm -f checker-framework && \
ln -s checker-framework-optional-demo checker-framework && \
(cd $cf && rm -rf checker-qual-android) && \
# Edit settings.gradle to remove checker-qual-android.
(cd $cf && ./gradlew assembleForJavac) && \
(cd $cf && ./gradlew javadoc) && \
(cd $cf && ./gradlew manual) && \
(cd && java -cp $HOME/java/plume-lib/javadoc-lookup/build/libs/javadoc-lookup-all.jar org.plumelib.javadoclookup.CreateJavadocIndex > ~/.javadoc-index.el-NEW && mv ~/.javadoc-index.el-NEW ~/.javadoc-index.el)

## Warm up the gradle daemon:
(let ((default-directory (substitute-in-file-name "$t/checker-framework-optional-demo")))
  (compile "./gradlew assembleForJavac"))

## Stub file with @Present annotations removed and @EnsuresQualifierIf commented
cp $t/jdk/src/java.base/share/classes/java/util/Optional.java $ch/src/main/java/org/checkerframework/checker/optional/jdk.astub
sed -i 's/@Present //' $ch/src/main/java/org/checkerframework/checker/optional/jdk.astub
sed -i 's/@EnsuresQualifierIf/\/\/ @EnsuresQualifierIf/' $ch/src/main/java/org/checkerframework/checker/optional/jdk.astub

## Move orginal .java files aside (leave messages.properties file).
## Leave compiler interface, since the test references it.
cd $cf/checker/src/main/java/org/checkerframework/checker/optional/
for FILE in `find . -name '*.java'`; do mv $FILE $FILE-ORIG; done
cd $cf/checker-qual/src/main/java/org/checkerframework/checker/optional/
for FILE in `find . -name '*.java'`; do mv $FILE $FILE-ORIG; done
(cd $cf && ./gradlew assembleForJavac tags)

;; Open presentation and searches
(progn
 ;; Edit this for the current presentation
 (browse-url "https://docs.google.com/presentation/d/1pBGcJtFyuEcQdziasgRfQ4d-5emEPSgHo7fdSUwwJDc")
 (sit-for 1)
 (browse-url "https://www.google.com/search?q=rules+for+using+optional+java")
 (sit-for 1)
 (browse-url "https://stuartmarks.wordpress.com/2016/09/27/vjug24-session-on-optional/"))

;; Open manual in two browser tabs:  one for creating a
;; checker, one for the Optional Checker manual chpapter.
;; Note that file URLs do not work in WSL.
;; Version with file URLs:
(progn
 (browse-url "/home/mernst/research/types/checker-framework-optional-demo/docs/manual/manual.html")
 (sit-for 1)
 (browse-url "file:///home/mernst/research/types/checker-framework-optional-demo/docs/manual/manual.html#optional-checker"))
;; Version with http URLs:
(progn
 (browse-url "https://checkerframework.org/manual/")
 (sit-for 1)
 (browse-url "https://checkerframework.org/manual/#optional-checker"))

----------------

Open some files in my editor, and use a TAGS table:
(progn
 ;; Source code directory
 (find-file (substitute-in-file-name "$t/checker-framework-optional-demo/checker/src/main/java/org/checkerframework/checker/optional/"))
 ;; Test cases
 (find-file (substitute-in-file-name "$t/checker-framework-optional-demo/checker/tests/optional/"))
 (find-file (substitute-in-file-name "$t/demos/creating-checker-demo/"))
 ;; TAGS table
 (visit-tags-table (substitute-in-file-name "$t/checker-framework-optional-demo/"))
 )

----------------

Present the slides.  (Start out by asking whether anyone has ever suffered a null pointer exception.)
(The example code in this directory can replace the examples on the slides, perhaps.)
 * For the withNullable/ directory
    * Show Person.java
    * Show Client.java
    * Compile and run: `make`
    * NullPointerException
    * Add a test against null
    * Compile and run: `make`
 * Same for withOptional/ directory
 * In withNullable/ directory:
    * In Client.java, comment out my change
    * Run the Nullness Checker: see the warning
    * Uncomment the change
    * Run the Nullness Checker: see that it compiles cleanly without warnings
 * Same for withOptional/ directory
)

Then, follow the "Tips for creating a checker" chapter of the manual:
https://checkerframework.org/manual/#creating-a-checker

----------------

Notes:
 * in general, show the test case failing first, then passing.
 * start compilation early because it sometimes takes a long time.

----------------

QUALIFIERS

Create Present, MaybePresent [skip polymorphism]
in $ch/src/main/java/org/checkerframework/checker/optional/qual/
by cut-and-paste-and-edit from the manual.  Change:
 * package
 * Javadoc
 * @SubtypeOf
 * interface name

Compile [don't compile within $ch]:
(cd $cf && ./gradlew assemble)
gradle -p $cf assemble

Test with Subtyping Checker:

# Show the file $ch/tests/optional/SubtypeCheck.java

cd $ch/tests/optional
$ch/bin/javac \
  -processor org.checkerframework.common.subtyping.SubtypingChecker \
  -Aquals=org.checkerframework.checker.optional.qual.Present,org.checkerframework.checker.optional.qual.MaybePresent \
  SubtypeCheck.java

----------------

COMPILER INTERFACE

# Create
# $ch/src/main/java/org/checkerframework/checker/optional/OptionalChecker.java
# then re-compile:
(cd $cf && ./gradlew assemble)

# After that, run the same test:
cd $ch/tests/optional
$ch/bin/javac -processor optional SubtypeCheck.java
[javacheck -processor optional SubtypeCheck.java] [not working at the moment]

----------------

ANNOTATED LIBRARY

# First, show this test file: $ch/tests/optional/JdkCheck.java
# and run the checker to show what error messages get output without any JDK annotations:
cd $ch/tests/optional && $ch/bin/javac -processor optional JdkCheck.java
# There are 5 errors, two of which (including #3) are not expected.

# Add just 3 @Present annotations to
# $ch/src/main/java/org/checkerframework/checker/optional/jdk.astub
of  return type
get  receiver
orElseThrow  receiver  (two occurrences)

# RECOMPILE:

# Test it:
(cd $cf && ./gradlew assemble)
cd $ch/tests/optional && $ch/bin/javac -processor optional JdkCheck.java

----------------

TYPE RULES: Nothing to do, was in annotated JDK.

----------------

TYPE INTRODUCTION RULES: Nothing to do, was in annotated JDK.

----------------

FLOW-SENSITIVITY

# Test: $ch/tests/optional/FlowSensitivity.java
cd $ch/tests/optional && $ch/bin/javac -processor optional FlowSensitivity.java

## Do not use $ch/bin-devel/javac nor javacheck above.

Uncomment @EnsuresQualifierIf library annotation for isPresent

(cd $cf && ./gradlew assemble)
# Test it:
cd $ch/tests/optional && javacheck -processor org.checkerframework.checker.optional.OptionalChecker FlowSensitivity.java

----------------

Notice that we still haven't written any code!
The talk slot (45-60 minutes) is probably finished by now.

----------------

To handle rule #1,
add Nullness annotations to Optional.java in the nullness JDK, not optional JDK.

Show `value` field and `ofNullable` and `orElse` methods in the NULLNESS annotated JDK:
$ch/jdk/nullness/src/java/util/Optional.java

public final @NonNull class Optional<T extends @NonNull Object> {
    private final @Nullable T value;
    public static <T extends @NonNull Object> Optional<T> ofNullable(@Nullable T value) {
    public @PolyNull T orElse(@PolyNull T other) {

----------------

If there is more time, implement rule #7 "Donâ€™t use Optional to wrap any collection type".
Show the source code for the TypeValidator, in OptionalVisitor.java (search for "Rule #6")
$ch/src/main/java/org/checkerframework/checker/optional/OptionalVisitor.java-ORIG

----------------

The Optional Checker checks all the rules; this demo has only shown how to
handle some of the rules.

===========================================================================
